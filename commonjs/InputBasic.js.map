{"version":3,"sources":["../source/InputBasic.js"],"names":["createInput","defaultMetadata","InputBasic","ref","value","onChange","country","international","withCountryCallingCode","metadata","Input","inputComponent","rest","prefix","_onChange","event","newValue","target","newValueFormatted","format","indexOf","slice","React","forwardRef","propTypes","PropTypes","string","isRequired","func","bool","object","elementType","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\n\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\n\nexport function createInput(defaultMetadata) {\n\t/**\n\t * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\n\t * but still works good enough. When erasing or inserting digits in the middle\n\t * of a phone number the caret usually jumps to the end: this is the expected\n\t * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\n\t */\n\tfunction InputBasic({\n\t\tvalue,\n\t\tonChange,\n\t\tcountry,\n\t\tinternational,\n\t\twithCountryCallingCode,\n\t\tmetadata,\n\t\tinputComponent: Input,\n\t\t...rest\n\t}, ref) {\n\t\tconst prefix = getInputValuePrefix({\n\t\t\tcountry,\n\t\t\tinternational,\n\t\t\twithCountryCallingCode,\n\t\t\tmetadata\n\t\t})\n\n\t\tconst _onChange = useCallback((event) => {\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\n\t\t\t// By default, if a value is something like `\"(123)\"`\n\t\t\t// then Backspace would only erase the rightmost brace\n\t\t\t// becoming something like `\"(123\"`\n\t\t\t// which would give the same `\"123\"` value\n\t\t\t// which would then be formatted back to `\"(123)\"`\n\t\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t\t// Working around this issue with this simple hack.\n\t\t\tif (newValue === value) {\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\n\t\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\n\t\t\t\t}\n\t\t\t}\n\t\t\tonChange(newValue)\n\t\t}, [prefix, value, onChange, country, metadata])\n\n\t\treturn (\n\t\t\t<Input\n\t\t\t\t{...rest}\n\t\t\t\tref={ref}\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\n\t\t\t\tonChange={_onChange}/>\n\t\t)\n\t}\n\n\tInputBasic = React.forwardRef(InputBasic)\n\n\tInputBasic.propTypes = {\n\t\t/**\n\t\t * The parsed phone number.\n\t\t * \"Parsed\" not in a sense of \"E.164\"\n\t\t * but rather in a sense of \"having only\n\t\t * digits and possibly a leading plus character\".\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\t */\n\t\tvalue: PropTypes.string.isRequired,\n\n\t\t/**\n\t\t * Updates the `value`.\n\t\t */\n\t\tonChange: PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * A two-letter country code for formatting `value`\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\n\t\t * E.g. \"US\", \"RU\", etc.\n\t\t * If no `country` is passed then `value`\n\t\t * is formatted as an international phone number.\n\t\t * (e.g. `+7 800 555 35 35`)\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\n\t\t * because if `value` is an international number then `country` is ignored.\n\t\t */\n\t\tcountry : PropTypes.string,\n\n\t\t/**\n\t\t * If `country` property is passed along with `international={true}` property\n\t\t * then the phone number will be input in \"international\" format for that `country`\n\t\t * (without \"country calling code\").\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\n\t\t * (without \"country calling code\" `+1`).\n\t\t */\n\t\tinternational: PropTypes.bool,\n\n\t\t/**\n\t\t * If `country` and `international` properties are set,\n\t\t * then by default it won't include \"country calling code\" in the input field.\n\t\t * To change that, pass `withCountryCallingCode` property,\n\t\t * and it will include \"country calling code\" in the input field.\n\t\t */\n\t\twithCountryCallingCode: PropTypes.bool,\n\n\t\t/**\n\t\t * `libphonenumber-js` metadata.\n\t\t */\n\t\tmetadata: PropTypes.object.isRequired,\n\n\t\t/**\n\t\t * The `<input/>` component.\n\t\t */\n\t\tinputComponent: PropTypes.elementType.isRequired\n\t}\n\n\tInputBasic.defaultProps = {\n\t\tmetadata: defaultMetadata,\n\t\tinputComponent: 'input'\n\t}\n\n\treturn InputBasic\n}\n\nexport default createInput()\n\nfunction format(prefix, value, country, metadata) {\n\treturn removeInputValuePrefix(\n\t\tformatIncompletePhoneNumber(\n\t\t\tprefix + value,\n\t\t\tcountry,\n\t\t\tmetadata\n\t\t),\n\t\tprefix\n\t)\n}"],"file":"InputBasic.js"}