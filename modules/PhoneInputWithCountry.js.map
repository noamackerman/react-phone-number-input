{"version":3,"sources":["../source/PhoneInputWithCountry.js"],"names":["React","PropTypes","classNames","InputSmart","InputBasic","Flag","InternationalIcon","sortCountryOptions","isCountrySupportedWithError","getSupportedCountries","getSupportedCountryOptions","getCountries","createCountryIconComponent","metadata","metadataPropType","labels","labelsPropType","getPreSelectedCountry","getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","getInitialPhoneDigits","onPhoneDigitsChange","e164","getPhoneInputWithCountryStateUpdateFromNewProps","PhoneNumberInput_","props","createRef","country","newCountry","international","onChange","focusInputOnCountrySelection","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","useNationalFormat","newValue","getInputRef","current","focus","setState","hasUserSelectedACountry","value","_phoneDigits","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","countries","currentlySelectedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","displayInitialValueAsLocalNumber","initialValueFormat","undefined","phoneNumber","CountryIcon","required","onCountryChange","selectedCountry","prevProps","prevState","inputRef","name","disabled","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","countryOptionsOrder","flags","flagComponent","flagUrl","internationalIcon","reset","locales","rest","InputComponent","countrySelectOptions","useMemoCountrySelectOptions","countryNames","compareStringsLocales","onCountryFocus","onCountryBlur","PureComponent","PhoneNumberInput","forwardRef","ref","propTypes","string","func","isRequired","onKeyDown","bool","oneOf","arrayOf","oneOfType","objectOf","elementType","object","defaultProps","any","countrySelectOptionsMemo","countrySelectOptionsMemoDependencies","generator","dependencies","areEqualArrays","a","b","length","i"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport InputSmart from './InputSmart'\nimport InputBasic from './InputBasic'\n\nimport Flag from './Flag'\nimport InternationalIcon from './InternationalIcon'\n\nimport {\n\tsortCountryOptions,\n\tisCountrySupportedWithError,\n\tgetSupportedCountries,\n\tgetSupportedCountryOptions,\n\tgetCountries\n} from './helpers/countries'\n\nimport { createCountryIconComponent } from './CountryIcon'\n\nimport {\n\tmetadata as metadataPropType,\n\tlabels as labelsPropType\n} from './PropTypes'\n\nimport {\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tgetPhoneDigitsForNewCountry,\n\tgetInitialPhoneDigits,\n\tonPhoneDigitsChange,\n\te164\n} from './helpers/phoneInputHelpers'\n\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps'\n\nclass PhoneNumberInput_ extends React.PureComponent {\n\tinputRef = React.createRef()\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tconst {\n\t\t\tvalue,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\taddInternationalOption,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tlet {\n\t\t\tdefaultCountry,\n\t\t\tcountries\n\t\t} = this.props\n\n\t\t// Validate `defaultCountry`.\n\t\tif (defaultCountry) {\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\tdefaultCountry = undefined\n\t\t\t}\n\t\t}\n\n\t\t// Validate `countries`.\n\t\tcountries = getSupportedCountries(countries, metadata)\n\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\n\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\n\n\t\tthis.state = {\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops: this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry: getPreSelectedCountry({\n\t\t\t\tphoneNumber,\n\t\t\t\tdefaultCountry,\n\t\t\t\tcountries: countries || getCountries(metadata),\n\t\t\t\trequired: !addInternationalOption,\n\t\t\t\tmetadata\n\t\t\t}),\n\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\n\t\t\t// For example, a developer might theoretically pass some unsupported\n\t\t\t// countries as part of the `countries` property, and because of that\n\t\t\t// the component uses `this.state.countries` (which are filtered)\n\t\t\t// instead of `this.props.countries`\n\t\t\t// (which could potentially contain unsupported countries).\n\t\t\tcountries,\n\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n\t\t\tphoneDigits: getInitialPhoneDigits({\n\t\t\t\tvalue,\n\t\t\t\tphoneNumber,\n\t\t\t\tdefaultCountry,\n\t\t\t\tinternational,\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n\t\t\t\tmetadata\n\t\t\t}),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `phoneDigits` needs updating:\n\t\t\t// If the `value` property was changed externally\n\t\t\t// then it won't be equal to `state.value`\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { onCountryChange } = this.props\n\t\tlet { defaultCountry } = this.props\n\t\tconst { country: selectedCountry } = this.state\n\t\tif (onCountryChange) {\n\t\t\tif (defaultCountry) {\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\t\tdefaultCountry = undefined\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedCountry !== defaultCountry) {\n\t\t\t\tonCountryChange(selectedCountry)\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { onCountryChange } = this.props\n\t\tconst { country } = this.state\n\t\t// Call `onCountryChange` when user selects another country.\n\t\tif (onCountryChange && country !== prevState.country) {\n\t\t\tonCountryChange(country)\n\t\t}\n\t}\n\n\t// A shorthand for not passing `metadata` as a second argument.\n\tisCountrySupportedWithError = (country) => {\n\t\tconst { metadata } = this.props\n\t\treturn isCountrySupportedWithError(country, metadata)\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\tonCountryChange = (newCountry) => {\n\t\tconst {\n\t\t\tinternational,\n\t\t\tmetadata,\n\t\t\tonChange,\n\t\t\tfocusInputOnCountrySelection\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: prevCountry\n\t\t} = this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n\t\t\tprevCountry,\n\t\t\tnewCountry,\n\t\t\tmetadata,\n\t\t\t// Convert the phone number to \"national\" format\n\t\t\t// when the user changes the selected country by hand.\n\t\t\tuseNationalFormat: !international\n\t\t})\n\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\tif (focusInputOnCountrySelection) {\n\t\t\tthis.getInputRef().current.focus()\n\t\t}\n\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the `defaultCountry` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\n\t\tthis.setState({\n\t\t\tcountry: newCountry,\n\t\t\thasUserSelectedACountry: true,\n\t\t\tphoneDigits: newPhoneDigits,\n\t\t\tvalue: newValue\n\t\t},\n\t\t() => {\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(newValue)\n\t\t})\n\t}\n\n\t/**\n\t * `<input/>` `onChange()` handler.\n\t * Updates `value` property accordingly (so that they are kept in sync).\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t */\n\tonChange = (_phoneDigits) => {\n\t\tconst {\n\t\t\tdefaultCountry,\n\t\t\tonChange,\n\t\t\taddInternationalOption,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountries,\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry\n\t\t} = this.state\n\n\t\tconst {\n\t\t\tphoneDigits,\n\t\t\tcountry,\n\t\t\tvalue\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\n\t\t\tprevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry,\n\t\t\tdefaultCountry,\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t})\n\n\t\tconst stateUpdate = {\n\t\t\tphoneDigits,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t}\n\n\t\tif (countryCallingCodeEditable === false) {\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\n\t\t\t// then it would have no effect when erasing an inital international prefix\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\n\t\t\t// so the component wouldn't rerender, and the user would be able\n\t\t\t// to erase the country calling code part, and that part is\n\t\t\t// assumed to be non-eraseable. That's why the component is\n\t\t\t// forcefully rerendered here.\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\n\t\t\t\tstateUpdate.forceRerender = {}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState(\n\t\t\tstateUpdate,\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\t() => onChange(value)\n\t\t)\n\t}\n\n\t// Toggles the `--focus` CSS class.\n\t_onFocus = () => this.setState({ isFocused: true })\n\n\t// Toggles the `--focus` CSS class.\n\t_onBlur = () => this.setState({ isFocused: false })\n\n\tonFocus = (event) => {\n\t\tthis._onFocus()\n\t\tconst { onFocus } = this.props\n\t\tif (onFocus) {\n\t\t\tonFocus(event)\n\t\t}\n\t}\n\n\tonBlur = (event) => {\n\t\tconst { onBlur } = this.props\n\t\tthis._onBlur()\n\t\tif (onBlur) {\n\t\t\tonBlur(event)\n\t\t}\n\t}\n\n\tonCountryFocus = (event) => {\n\t\tthis._onFocus()\n\t\t// this.setState({ countrySelectFocused: true })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onFocus } = countrySelectProps\n\t\t\tif (onFocus) {\n\t\t\t\tonFocus(event)\n\t\t\t}\n\t\t}\n\t}\n\n\tonCountryBlur = (event) => {\n\t\tthis._onBlur()\n\t\t// this.setState({ countrySelectFocused: false })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onBlur } = countrySelectProps\n\t\t\tif (onBlur) {\n\t\t\t\tonBlur(event)\n\t\t\t}\n\t\t}\n\t}\n\n\tgetInputRef() {\n\t\tconst { inputRef } = this.props\n\t\treturn inputRef || this.inputRef\n\t}\n\n\t// `state` holds previous props as `props`, and also:\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n\t// (and a couple of other less significant properties)\n\tstatic getDerivedStateFromProps(props, state) {\n\t\treturn {\n\t\t\t// Emulate `prevProps` via `state.props`.\n\t\t\tprops,\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\t// Generic HTML attributes.\n\t\t\tname,\n\t\t\tdisabled,\n\t\t\tautoComplete,\n\t\t\tstyle,\n\t\t\tclassName,\n\n\t\t\t// Number `<input/>` properties.\n\t\t\tinputRef,\n\t\t\tinputComponent,\n\t\t\tnumberInputProps,\n\t\t\tsmartCaret,\n\n\t\t\t// Country `<select/>` properties.\n\t\t\tcountrySelectComponent: CountrySelectComponent,\n\t\t\tcountrySelectProps,\n\n\t\t\t// Container `<div/>` properties.\n\t\t\tcontainerComponent: ContainerComponent,\n\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\n\t\t\tdefaultCountry,\n\t\t\tcountries,\n\t\t\tcountryOptionsOrder,\n\t\t\tlabels,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagUrl,\n\t\t\taddInternationalOption,\n\t\t\tinternationalIcon,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tonCountryChange,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tfocusInputOnCountrySelection,\n\t\t\treset,\n\t\t\tmetadata,\n\t\t\tinternational,\n\t\t\tlocales,\n\t\t\t// compareStrings,\n\t\t\t...rest\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountry,\n\t\t\tphoneDigits,\n\t\t\tisFocused\n\t\t} = this.state\n\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\n\n\t\tconst countrySelectOptions = useMemoCountrySelectOptions(() => {\n\t\t\treturn sortCountryOptions(\n\t\t\t\tgetCountrySelectOptions({\n\t\t\t\t\tcountries: countries || getCountries(metadata),\n\t\t\t\t\tcountryNames: labels,\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\n\t\t\t\t\tcompareStringsLocales: locales,\n\t\t\t\t\t// compareStrings\n\t\t\t\t}),\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\n\t\t\t)\n\t\t}, [\n\t\t\tcountries,\n\t\t\tcountryOptionsOrder,\n\t\t\taddInternationalOption,\n\t\t\tlabels,\n\t\t\tmetadata\n\t\t])\n\n\t\treturn (\n\t\t\t<ContainerComponent\n\t\t\t\tstyle={style}\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\n\t\t\t\t\t'PhoneInput--focus': isFocused\n\t\t\t\t})}>\n\n\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t<CountrySelectComponent\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\n\t\t\t\t\taria-label={labels.country}\n\t\t\t\t\t{...countrySelectProps}\n\t\t\t\t\tvalue={country}\n\t\t\t\t\toptions={countrySelectOptions}\n\t\t\t\t\tonChange={this.onCountryChange}\n\t\t\t\t\tonFocus={this.onCountryFocus}\n\t\t\t\t\tonBlur={this.onCountryBlur}\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\n\n\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t<InputComponent\n\t\t\t\t\tref={this.getInputRef()}\n\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\tautoComplete={autoComplete}\n\t\t\t\t\t{...numberInputProps}\n\t\t\t\t\t{...rest}\n\t\t\t\t\tname={name}\n\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\tcountry={country}\n\t\t\t\t\tvalue={phoneDigits || ''}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tonFocus={this.onFocus}\n\t\t\t\t\tonBlur={this.onBlur}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tinputComponent={inputComponent}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'PhoneInputInput',\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\n\t\t\t\t\t\trest.className\n\t\t\t\t\t)}/>\n\t\t\t</ContainerComponent>\n\t\t)\n\t}\n}\n\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\n))\n\nPhoneNumberInput.propTypes = {\n\t/**\n\t * Phone number in `E.164` format.\n\t *\n\t * Example:\n\t *\n\t * `\"+12223333333\"`\n\t */\n\tvalue: PropTypes.string,\n\n\t/**\n\t * Updates the `value` as the user inputs the phone number.\n\t */\n\tonChange: PropTypes.func.isRequired,\n\n\t/**\n\t * Toggles the `--focus` CSS class.\n\t * @ignore\n\t */\n\tonFocus: PropTypes.func,\n\n\t/**\n\t * `onBlur` is usually passed by `redux-form`.\n\t * @ignore\n\t */\n\tonBlur: PropTypes.func,\n\n\t/**\n\t * `onKeyDown` handler (e.g. to handle Enter key press).\n\t * @ignore\n\t */\n\tonKeyDown: PropTypes.func,\n\n\t/**\n\t * Set to `true` to disable both the phone number `<input/>`\n\t * and the country `<select/>`.\n\t */\n\tdisabled: PropTypes.bool,\n\n\t/**\n\t * Sets `autoComplete` property for phone number `<input/>`.\n\t *\n\t * Web browser's \"autocomplete\" feature\n\t * remembers the phone number being input\n\t * and can also autofill the `<input/>`\n\t * with previously remembered phone numbers.\n\t *\n\t * https://developers.google.com\n\t * /web/updates/2015/06/checkout-faster-with-autofill\n\t *\n\t * For example, can be used to turn it off:\n\t *\n\t * \"So when should you use `autocomplete=\"off\"`?\n\t *  One example is when you've implemented your own version\n\t *  of autocomplete for search. Another example is any form field\n\t *  where users will input and submit different kinds of information\n\t *  where it would not be useful to have the browser remember\n\t *  what was submitted previously\".\n\t */\n\t// (is `\"tel\"` by default)\n\tautoComplete: PropTypes.string.isRequired,\n\n\t/**\n\t * Set to `\"national\"` to show the initial `value` in\n\t * \"national\" format rather than \"international\".\n\t *\n\t * For example, if `initialValueFormat` is `\"national\"`\n\t * and the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\n\t *\n\t * By default, `initialValueFormat` is `undefined`,\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n\t *\n\t * The reason for such default behaviour is that\n\t * the newer generation grows up when there are no stationary phones\n\t * and therefore everyone inputs phone numbers in international format\n\t * in their smartphones so people gradually get more accustomed to\n\t * writing phone numbers in international format rather than in local format.\n\t * Future people won't be using \"national\" format, only \"international\".\n\t */\n\t// (is `undefined` by default)\n\tinitialValueFormat: PropTypes.oneOf(['national']),\n\n\t// `displayInitialValueAsLocalNumber` property has been\n\t// superceded by `initialValueFormat` property.\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\n\n\t/**\n\t * The country to be selected by default.\n\t * For example, can be set after a GeoIP lookup.\n\t *\n\t * Example: `\"US\"`.\n\t */\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\tdefaultCountry: PropTypes.string,\n\n\t/**\n\t * If specified, only these countries will be available for selection.\n\t *\n\t * Example:\n\t *\n\t * `[\"RU\", \"UA\", \"KZ\"]`\n\t */\n\tcountries: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * Custom country `<select/>` option names.\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n\t *\n\t * Example:\n\t *\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n\t *\n\t * See the `locales` directory for examples.\n\t */\n\tlabels: labelsPropType.isRequired,\n\n\t/**\n\t * Country `<select/>` options are sorted by their labels.\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\n\t * Some languages, like Chinese, support multiple sorting variants\n\t * (called \"collations\"), and the user might prefer one or another.\n\t * Also, sometimes the Operating System language is not always\n\t * the preferred language for a person using a website or an application,\n\t * so there should be a way to specify custom locale.\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\n\t */\n\tlocales: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.arrayOf(PropTypes.string)\n\t]),\n\n\t/*\n\t * Custom country `<select/>` options sorting function.\n\t * The default one uses `a.localeCompare(b)`, and,\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\n\t * There have been requests to add custom sorter for cases\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\n\tcompareStrings: PropTypes.func,\n\t */\n\n\t/**\n\t * A URL template of a country flag, where\n\t * \"{XX}\" is a two-letter country code in upper case,\n\t * or where \"{xx}\" is a two-letter country code in lower case.\n\t * By default it points to `country-flag-icons` gitlab pages website.\n\t * I imagine someone might want to download those country flag icons\n\t * and host them on their own servers instead\n\t * (all flags are available in the `country-flag-icons` library).\n\t * There's a catch though: new countries may be added in future,\n\t * so when hosting country flag icons on your own server\n\t * one should check the `CHANGELOG.md` every time before updating this library,\n\t * otherwise there's a possibility that some new country flag would be missing.\n\t */\n\tflagUrl: PropTypes.string.isRequired,\n\n\t/**\n\t * Custom country flag icon components.\n\t * These flags will be used instead of the default ones.\n\t * The the \"Flags\" section of the readme for more info.\n\t *\n\t * The shape is an object where keys are country codes\n\t * and values are flag icon components.\n\t * Flag icon components receive the same properties\n\t * as `flagComponent` (see below).\n\t *\n\t * Example:\n\t *\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\n\t *\n\t * Example:\n\t *\n\t * `import flags from 'country-flag-icons/react/3x2'`\n\t *\n\t * `import PhoneInput from 'react-phone-number-input'`\n\t *\n\t * `<PhoneInput flags={flags} .../>`\n\t */\n\tflags: PropTypes.objectOf(PropTypes.elementType),\n\n\t/**\n\t * Country flag icon component.\n\t *\n\t * Takes properties:\n\t *\n\t * * `country: string` — The country code.\n\t * * `countryName: string` — The country name.\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\n\t * * `flags: object` — The `flags` property (see above).\n\t */\n\tflagComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\n\t */\n\taddInternationalOption: PropTypes.bool.isRequired,\n\n\t/**\n\t * \"International\" icon component.\n\t * Should have the same aspect ratio.\n\t *\n\t * Receives properties:\n\t *\n\t * * `title: string` — \"International\" country option label.\n\t */\n\tinternationalIcon: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\n\t *\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\n\t * * `\"🌐\"` — inserts \"International\" option.\n\t * * `\"|\"` — inserts a separator.\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\n\t *\n\t * Example:\n\t *\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n\t */\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * `<Phone/>` component CSS style object.\n\t */\n\tstyle: PropTypes.object,\n\n\t/**\n\t * `<Phone/>` component CSS class.\n\t */\n\tclassName: PropTypes.string,\n\n\t/**\n\t * Country `<select/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `name: string?` — HTML `name` attribute.\n\t * * `value: string?` — The currently selected country code.\n\t * * `onChange(value: string?)` — Updates the `value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\n\t * * `className: string` — CSS class name.\n\t */\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Country `<select/>` component props.\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\n\t */\n\tcountrySelectProps: PropTypes.object,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `value: string` — The formatted `value`.\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n\t *\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n\t */\n\tinputComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `style: object` — A component CSS style object.\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\n\t */\n\tcontainerComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Phone number `<input/>` component props.\n\t */\n\tnumberInputProps: PropTypes.object,\n\n\t/**\n\t * By default, the caret position is being \"intelligently\" managed\n\t * while a user inputs a phone number.\n\t * This \"smart\" caret behavior can be turned off\n\t * by passing `smartCaret={false}` property.\n\t * This is just an \"escape hatch\" for any possible caret position issues.\n\t */\n\t// Is `true` by default.\n\tsmartCaret: PropTypes.bool.isRequired,\n\n\t/**\n\t * Set to `true` to force \"international\" phone number format.\n\t * Set to `false` to force \"national\" phone number format.\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\n\t */\n\tinternational: PropTypes.bool,\n\n\t/**\n\t * If set to `true`, the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: PropTypes.bool.isRequired,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\n\n\t/**\n\t * `libphonenumber-js` metadata.\n\t *\n\t * Can be used to pass custom `libphonenumber-js` metadata\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\n\t */\n\tmetadata: metadataPropType.isRequired,\n\n\t/**\n\t * Is called every time the selected country changes:\n\t * either programmatically or when user selects it manually from the list.\n\t */\n\t// People have been asking for a way to get the selected country.\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t// For some it's just a \"business requirement\".\n\t// I guess it's about gathering as much info on the user as a website can\n\t// without introducing any addional fields that would complicate the form\n\t// therefore reducing \"conversion\" (that's a marketing term).\n\t// Assuming that the phone number's country is the user's country\n\t// is not 100% correct but in most cases I guess it's valid.\n\tonCountryChange: PropTypes.func,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\n}\n\nPhoneNumberInput.defaultProps = {\n\t/**\n\t * Remember (and autofill) the value as a phone number.\n\t */\n\tautoComplete: 'tel',\n\n\t/**\n\t * Flag icon component.\n\t */\n\tflagComponent: Flag,\n\n\t/**\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\n\t */\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n\t/**\n\t * Default \"International\" country `<select/>` option icon.\n\t */\n\tinternationalIcon: InternationalIcon,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t */\n\tinputComponent: 'input',\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t */\n\tcontainerComponent: 'div',\n\n\t/**\n\t * Some users requested a way to reset the component:\n\t * both number `<input/>` and country `<select/>`.\n\t * Whenever `reset` property changes both number `<input/>`\n\t * and country `<select/>` are reset.\n\t * It's not implemented as some instance `.reset()` method\n\t * because `ref` is forwarded to `<input/>`.\n\t * It's also not replaced with just resetting `country` on\n\t * external `value` reset, because a user could select a country\n\t * and then not input any `value`, and so the selected country\n\t * would be \"stuck\", if not using this `reset` property.\n\t */\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\treset: PropTypes.any,\n\n\t/**\n\t *\n\t */\n\n\t/**\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\n\t */\n\tsmartCaret: true,\n\n\t/**\n\t * Whether to add the \"International\" option\n\t * to the list of countries.\n\t */\n\taddInternationalOption: true,\n\n\t/**\n\t * If set to `true` the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: false,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: true,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: true\n}\n\nexport default PhoneNumberInput\n\nlet countrySelectOptionsMemo\nlet countrySelectOptionsMemoDependencies\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n\tif (!countrySelectOptionsMemoDependencies ||\n\t\t!areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n\t\tcountrySelectOptionsMemo = generator()\n\t\tcountrySelectOptionsMemoDependencies = dependencies\n\t}\n\treturn countrySelectOptionsMemo\n}\n\nfunction areEqualArrays(a, b) {\n\tif (a.length !== b.length) {\n\t\treturn false\n\t}\n\tlet i = 0\n\twhile (i < a.length) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t}\n\treturn true\n}"],"file":"PhoneInputWithCountry.js"}