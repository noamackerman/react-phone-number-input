{"version":3,"sources":["../source/usePhoneDigits.js"],"names":["useRef","useState","useCallback","useEffect","AsYouType","getCountryCallingCode","parseDigits","getInternationalPhoneNumberPrefix","usePhoneDigits","value","onChange","country","defaultCountry","international","withCountryCallingCode","useNationalFormatForDefaultCountryValue","metadata","countryMismatchDetected","onCountryMismatch","actualCountry","console","error","current","getInitialPhoneDigits","getPhoneDigitsForValue","prevCountry","setPrevCountry","prevDefaultCountry","setPrevDefaultCountry","phoneDigits","setPhoneDigits","valueForPhoneDigits","setValueForPhoneDigits","rerenderTrigger","setRerenderTrigger","rerender","onSetPhoneDigits","prefix","indexOf","undefined","slice","asYouType","input","phoneNumber","getNumber","number","countryCallingCode","nationalNumber","formatNational"],"mappings":"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","sourcesContent":["import { useRef, useState, useCallback, useEffect } from 'react'\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\n\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix'\n\n/**\n * Returns `[phoneDigits, setPhoneDigits]`.\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\n */\nexport default function usePhoneDigits({\n\tvalue,\n\tonChange,\n\tcountry,\n\tdefaultCountry,\n\tinternational,\n\twithCountryCallingCode,\n\tuseNationalFormatForDefaultCountryValue,\n\tmetadata\n}) {\n\tconst countryMismatchDetected = useRef()\n\tconst onCountryMismatch = (value, country, actualCountry) => {\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\n\t\tcountryMismatchDetected.current = true\n\t}\n\tconst getInitialPhoneDigits = () => getPhoneDigitsForValue(\n\t\tvalue,\n\t\tcountry,\n\t\tinternational,\n\t\twithCountryCallingCode,\n\t\tdefaultCountry,\n\t\tuseNationalFormatForDefaultCountryValue,\n\t\tmetadata,\n\t\tonCountryMismatch\n\t)\n\t// This is only used to detect `country` property change.\n\tconst [prevCountry, setPrevCountry] = useState(country)\n\t// This is only used to detect `defaultCountry` property change.\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\n\t// This is only used to detect `value` property changes.\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\n\t// Rerender hack.\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\n\t// If `value` property has been changed externally\n\t// then re-initialize the component.\n\tuseEffect(() => {\n\t\tif (value !== valueForPhoneDigits) {\n\t\t\tsetValueForPhoneDigits(value)\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\n\t\t}\n\t}, [value])\n\t// If the `country` has been changed then re-initialize the component.\n\tuseEffect(() => {\n\t\tif (country !== prevCountry) {\n\t\t\tsetPrevCountry(country)\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\n\t\t}\n\t}, [country])\n\t// If the `defaultCountry` has been changed then re-initialize the component.\n\tuseEffect(() => {\n\t\tif (defaultCountry !== prevDefaultCountry) {\n\t\t\tsetPrevDefaultCountry(defaultCountry)\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\n\t\t}\n\t}, [defaultCountry])\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\n\tuseEffect(() => {\n\t\tif (valueForPhoneDigits !== value) {\n\t\t\tonChange(valueForPhoneDigits)\n\t\t}\n\t}, [valueForPhoneDigits])\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\n\t\tlet value\n\t\tif (country) {\n\t\t\tif (international && withCountryCallingCode) {\n\t\t\t\t// The `<input/>` value must start with the country calling code.\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\n\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\n\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\n\t\t\t\t\tif (countryMismatchDetected.current) {\n\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\n\t\t\t\t\t\t// if it performed an \"undo\" here, then\n\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\n\t\t\t\t\t\t// so this special case at least allows phone number editing\n\t\t\t\t\t\t// when `value` already doesn't match the `country`.\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\n\t\t\t\t\t\t// then it could have no effect when erasing phone number\n\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\n\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\n\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\n\t\t\t\t\t\t// to erase the country calling code part, and that part is\n\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\n\t\t\t\t\t\t// forcefully rerendered here.\n\t\t\t\t\t\tsetPhoneDigits(prefix)\n\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\n\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\n\t\t\t\t\t\treturn rerender()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Entering phone number either in \"national\" format\n\t\t\t\t// when `country` has been specified, or in \"international\" format\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\n\t\t\t\t// Therefore, `+` is not allowed.\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\n\t\t\t\t\t// Remove the `+`.\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!defaultCountry) {\n\t\t\t// Force a `+` in the beginning of a `value`\n\t\t\t// when no `country` and `defaultCountry` have been specified.\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\n\t\t\t\t// Prepend a `+`.\n\t\t\t\tphoneDigits = '+' + phoneDigits\n\t\t\t}\n\t\t}\n\t\t// Convert `phoneDigits` to `value`.\n\t\tif (phoneDigits) {\n\t\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\n\t\t\tasYouType.input(\n\t\t\t\tcountry && international && !withCountryCallingCode ?\n\t\t\t\t`+${getCountryCallingCode(country, metadata)}${phoneDigits}` :\n\t\t\t\tphoneDigits\n\t\t\t)\n\t\t\tconst phoneNumber = asYouType.getNumber()\n\t\t\t// If it's a \"possible\" incomplete phone number.\n\t\t\tif (phoneNumber) {\n\t\t\t\tvalue = phoneNumber.number\n\t\t\t}\n\t\t}\n\t\tsetPhoneDigits(phoneDigits)\n\t\tsetValueForPhoneDigits(value)\n\t}, [\n\t\tcountry,\n\t\tinternational,\n\t\twithCountryCallingCode,\n\t\tdefaultCountry,\n\t\tmetadata,\n\t\tsetPhoneDigits,\n\t\tsetValueForPhoneDigits,\n\t\trerender,\n\t\tcountryMismatchDetected\n\t])\n\treturn [\n\t\tphoneDigits,\n\t\tonSetPhoneDigits\n\t]\n}\n\n/**\n * Returns phone number input field value for a E.164 phone number `value`.\n * @param  {string} [value]\n * @param  {string} [country]\n * @param  {boolean} [international]\n * @param  {boolean} [withCountryCallingCode]\n * @param  {string} [defaultCountry]\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\n * @param  {object} metadata\n * @return {string}\n */\nfunction getPhoneDigitsForValue(\n\tvalue,\n\tcountry,\n\tinternational,\n\twithCountryCallingCode,\n\tdefaultCountry,\n\tuseNationalFormatForDefaultCountryValue,\n\tmetadata,\n\tonCountryMismatch\n) {\n\tif (country && international && withCountryCallingCode) {\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\n\t\tif (value) {\n\t\t\tif (value.indexOf(prefix) !== 0) {\n\t\t\t\tonCountryMismatch(value, country)\n\t\t\t}\n\t\t\treturn value\n\t\t}\n\t\treturn prefix\n\t}\n\tif (!value) {\n\t\treturn ''\n\t}\n\tif (!country && !defaultCountry) {\n\t\treturn value\n\t}\n\tconst asYouType = new AsYouType(undefined, metadata)\n\tasYouType.input(value)\n\tconst phoneNumber = asYouType.getNumber()\n\tif (phoneNumber) {\n\t\tif (country) {\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\n\t\t\t\tonCountryMismatch(value, country)\n\t\t\t}\n\t\t\tif (international) {\n\t\t\t\treturn phoneNumber.nationalNumber\n\t\t\t}\n\t\t\treturn parseDigits(phoneNumber.formatNational())\n\t\t} else {\n\t\t\tif (phoneNumber.country && phoneNumber.country === defaultCountry && useNationalFormatForDefaultCountryValue) {\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\n\t\t\t}\n\t\t\treturn value\n\t\t}\n\t} else {\n\t\treturn ''\n\t}\n}"],"file":"usePhoneDigits.js"}